
env:
  # base parms
  name: 'drone_2'
  
  # env specific params 
  net: 'SiouxFalls'  # The transportation network to use, 'SiouxFalls'
  # 'SiouxFalls' is a small network with 24 nodes and 38 links -> number of possible od pairs is 24*23 = 552
  n_nodes: 24  # The number of nodes in the network (The number of regions)
  n_links: 76  # The number of links in the network (The number of edges) (all have two directions, 76 link in total)

  T_T: []
  max_q: 2000  # number of random orders to generate, much larger than time horizon
  len_q: 2  # length of the visible queue 
  max_exp: 2  # the waiting time limit for orders expiring 
  rate: 1  # the rate of orders arriving per second (10 orders per min)


  modalities: ["car", "drone"]  # list of str, length M, represents courier modes
  num_couriers: [15, 10]  # number of couriers of each modality
  courier_init: [-1, 40]  # initial latency is initialized as uniform between these parameters (and truncated to be positive).
  


  speeds:  # drones and cars are the same speed everywhere. However, the cars are extremely impacted by downtown links (10x) but drones are less effected.
    - [1, 1]  # 1 to 2 Link speeds for modalities ['car', 'drone']
    - [1, 1]  # 1 tp 3
    - [1, 1]  # 2 to 1
    - [1, 1]  # 2 to 6
    - [1, 1]  # 3 to 1
    - [1, 1]  # 3 to 4
    - [1, 1]  # 3 to 12
    - [1, 1]  # 4 to 3
    - [1, 1]  # 4 to 5
    - [0.8, 0.9]  # 4 to 11
    - [1, 1]  # 5 to 4
    - [1, 1]  # 5 to 6 
    - [0.8, 0.9]  # 5 to 9
    - [1, 1]  # 6 to 2
    - [1, 1]  # 6 to 5
    - [1, 1]  # 6 to 8
    - [1, 1]  # 7 to 8
    - [1, 1]  # 7 to 18
    - [1, 1]  # 8 to 6
    - [1, 1]  # 8 to 7
    - [0.8, 0.9]  # 8 to 9
    - [0.8, 0.9]  # 8 to 16
    - [0.8, 0.9]  # 9 to 5
    - [0.8, 0.9]  # 9 to 8
    - [0.8, 0.9]  # 9 to 10
    - [0.8, 0.9]  # 10 to 9
    - [0.8, 0.9]  # 10 to 11
    - [0.8, 0.9]  # 10 to 15
    - [0.8, 0.9]  # 10 to 16
    - [0.8, 0.9]  # 10 to 17
    - [0.8, 0.9]  # 11 to 4
    - [0.8, 0.9]  # 11 to 10
    - [0.8, 0.9]  # 11 to 12
    - [0.8, 0.9]  # 11 to 14
    - [1, 1]  # 12 to 3
    - [0.8, 0.9]  # 12 to 11
    - [1, 1]  # 12 to 13
    - [1, 1]  # 13 to 12
    - [1, 1]  # 13 to 24
    - [0.8, 0.9]  # 14 to 11
    - [1, 1]  # 14 to 15
    - [1, 1]  # 14 to 23
    - [0.8, 0.9]  # 15 to 10
    - [1, 1]  # 15 to 14
    - [1, 1]  # 15 to 19
    - [1, 1]  # 15 to 22
    - [0.8, 0.9]  # 16 to 8
    - [0.8, 0.9]  # 16 to 10
    - [0.8, 0.9]  # 16 to 17
    - [0.8, 0.9]  # 16 to 18
    - [0.8, 0.9]  # 17 to 10
    - [0.8, 0.9]  # 17 to 16
    - [0.8, 0.9]  # 17 to 19
    - [1, 1]  # 18 to 7
    - [0.8, 0.9]  # 18 to 16
    - [1, 1]  # 18 to 20
    - [1, 1]  # 19 to 15
    - [0.8, 0.9]  # 19 to 17
    - [1, 1]  # 19 to 20
    - [1, 1]  # 20 to 18
    - [1, 1]  # 20 to 19
    - [1, 1]  # 20 to 21
    - [1, 1]  # 20 to 22
    - [1, 1]  # 21 to 20
    - [1, 1]  # 21 to 22
    - [1, 1]  # 21 to 24
    - [1, 1]  # 22 to 15
    - [1, 1]  # 22 to 20
    - [1, 1]  # 22 to 21
    - [1, 1]  # 22 to 23
    - [1, 1]  # 23 to 14
    - [1, 1]  # 23 to 22
    - [1, 1]  # 23 to 24
    - [1, 1]  # 24 to 13
    - [1, 1]  # 24 to 21
    - [1, 1]  # 24 to 23

  ##### set of dountown nodes 
  # {9,10,11,16,17}
  ##### set of rich nodes 
  # {4 , 5, 8, 14, 15 , 18, 19, 22, 23}
  ##### set of suburban nodes
  # {1, 2, 3, 6, 7, 12, 13, 20, 21, 24}

  rates_p: [0, 0, 0, 0, 0, 0, 0, 0, 0.2, 0.2, 0.2, 0, 0, 0, 0, 0.2, 0.2, 0, 0, 0, 0, 0, 0, 0]  # relative pickup rates (sums to 1) (orders mainly places for restaurants in the dountown area).
  rates_d: [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.01, 0.01, 0.01, 0.05, 0.05, 0.05, 0.05, 0.01, 0.01, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05]  # relative dropoff rates (sums to 1)(orders mainly come from regions around dountown).


  max_lat: 70.0  # The max latency users will wait (one hour)
  max_tau: 30.0  # The max price users will pay (20$ for delivery charge)
  max_utility : 35.0 # The max utility for the user


  vot_means: [0.8, 0.8, 0.8, 1.2, 1.2, 0.8, 0.8, 1.2, 5, 5, 5, 0.8, 0.8, 1.2, 1.2, 5, 5, 1.2, 1.2, 0.8, 0.8, 1.2, 1.2, 0.8]  # mean VoT of each region (suburban areas have lower VoT, middle has higher VoT, and downtown has the highest VoT)
  vot_stds: [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]  # standard deviation of VoT of each region (almost zero)



  etas: [1, 2]  # cost per hour for each courier modality. Assume cars are independent paid contractors (so cheaper), drones need to be fully paid for. Other potential ways to model this in the reward.